#include <iostream>
#include <string.h>
using namespace std;

int A[10000];
int head = 0, tail = 0;

void push_front(int x) {
	if (head == tail) {
		A[head] = x;
		tail++;
		if (tail >= 10000)
			tail = 0;
		return;
	}
	else {
		if ((head - 1) == tail)
			return;
		else if ((head == 0) && ((tail + 1) >= 10000))
			return;
		else {
			head--;
			if (head < 0)
				head = 9999;
			A[head] = x;
			return;
		}
	}
}

void push_back(int x) {
	if (head == tail) {
		A[tail] = x;
		tail++;
		if (tail >= 10000)
			tail = 0;
		return;
	}
	else {
		if ((tail + 1) == head)
			return;
		else {
			A[tail++] = x;
			if (tail >= 10000)
				tail = 0;
			return;
		}
	}
}

int pop_front() {
	if (tail == head)
		return -1;
	else {
		int tmp = head;
		head++;
		if (head > 9999)
			head = 0;
		return A[tmp];
	}
}

int pop_back() {
	if (tail == head)
		return -1;
	else {
		tail--;
		if (tail < 0)
			tail = 9999;
		return A[tail];
	}
}

int size() {
	if (tail == head)
		return 0;
	else {
		if (head > tail)
			return tail + (10000 - head);
		else
			return tail - head;
	}
}

int empty() {
	if (head == tail)
		return 1;
	else
		return 0;
}

int front() {
	if (head == tail)
		return -1;
	else
		return A[head];
}

int back() {
	if (head == tail)
		return -1;
	else {
		if (tail == 0)
			return A[9999];
		else
			return A[tail - 1];
	}
}

int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);

	int N, j = 0;

	cin >> N;

	int* print = new int[N];

	for (int i = 0; i < N; i++) {
		string command;
		cin >> command;
		if (command == "push_front") {
			int num;
			cin >> num;
			push_front(num);
		}
		else if (command == "push_back") {
			int num;
			cin >> num;
			push_back(num);
		}
		else if (command == "pop_front")
			print[j++] = pop_front();
		else if (command == "pop_back")
			print[j++] = pop_back();
		else if (command == "size")
			print[j++] = size();
		else if (command == "empty")
			print[j++] = empty();
		else if (command == "front")
			print[j++] = front();
		else
			print[j++] = back();
	}

	for (int i = 0; i < j; i++)
		cout << print[i] << endl;

	delete[] print;

	return 0;
}