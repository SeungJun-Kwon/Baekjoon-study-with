#include <iostream>
#include <string.h>
using namespace std;

typedef struct node{
	char data;
	struct node* left;
	struct node* right;
} list;

void printList(list* l) {
	while (l) {
		cout << l->data;
		l = l->right;
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cout.tie(NULL);
	cin.tie(NULL);

	string line;
	int M;
	char command;

	list* h = (list*)malloc(sizeof(list));
	list* p = NULL;
	if (h) {
		h->data = ' ';
		h->left = NULL;
		h->right = NULL;
		p = h;
	}

	cin >> line;

	for (int i = 0; i < line.length(); i++) {
		list* tmp = (list*)malloc(sizeof(list));
		if (tmp && p) {
			tmp->data = line[i];
			tmp->left = p;
			tmp->right = NULL;
			p->right = tmp;
			p = tmp;
		}
	}

	cin >> M;

	for (int i = 0; i < M; i++) {
		cin >> command;
		switch (command) {
		case 'P': {
			char data;
			cin >> data;
			list* tmp = (list*)malloc(sizeof(list));
			if (tmp && p) {
				tmp->data = data;
				tmp->left = p;
				if (p->right) {
					tmp->right = p->right;
					(p->right)->left = tmp;
				}
				else {
					tmp->right = NULL;
				}
				p->right = tmp;
				p = p->right;
				break;
			}
		}
		case 'B': {
			list* tmp = (list*)malloc(sizeof(list));
			if (p == h) break;
			if (tmp && p) {
				tmp = p;
				p = p->left;
				if (tmp->right) {
					p->right = tmp->right;
					(p->right)->left = p;
				}
				else
					p->right = NULL;
				tmp->left = NULL;
				free(tmp);
				break;
			}
		}
		case 'L': {
			if (p != h)
				p = p->left;
			break;
		}
		case 'D': {
			if (p->right)
				p = p->right;
			break;
		}
		}
	}

	printList(h->right);

	return 0;
}